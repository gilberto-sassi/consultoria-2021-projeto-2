arrange                 package:dplyr                  R Documentation

_A_r_r_a_n_g_e _r_o_w_s _b_y _c_o_l_u_m_n _v_a_l_u_e_s

_D_e_s_c_r_i_p_t_i_o_n:

     ‘arrange()’ orders the rows of a data frame by the values of
     selected columns.

     Unlike other dplyr verbs, ‘arrange()’ largely ignores grouping;
     you need to explicitly mention grouping variables (or use
     ‘.by_group = TRUE’) in order to group by them, and functions of
     variables are evaluated once per data frame, not once per group.

_U_s_a_g_e:

     arrange(.data, ..., .by_group = FALSE)
     
     ## S3 method for class 'data.frame'
     arrange(.data, ..., .by_group = FALSE)
     
_A_r_g_u_m_e_n_t_s:

   .data: A data frame, data frame extension (e.g. a tibble), or a lazy
          data frame (e.g. from dbplyr or dtplyr). See _Methods_,
          below, for more details.

     ...: <‘data-masking’> Variables, or functions of variables. Use
          ‘desc()’ to sort a variable in descending order.

.by_group: If ‘TRUE’, will sort first by grouping variable. Applies to
          grouped data frames only.

_D_e_t_a_i_l_s:

  _L_o_c_a_l_e_s:

       The sort order for character vectors will depend on the
       collating sequence of the locale in use: see ‘locales()’.

  _M_i_s_s_i_n_g _v_a_l_u_e_s:

       Unlike base sorting with ‘sort()’, ‘NA’ are:

         • always sorted to the end for local data, even when wrapped
           with ‘desc()’.

         • treated differently for remote data, depending on the
           backend.

_V_a_l_u_e:

     An object of the same type as ‘.data’. The output has the
     following properties:

        • All rows appear in the output, but (usually) in a different
          place.

        • Columns are not modified.

        • Groups are not modified.

        • Data frame attributes are preserved.

_M_e_t_h_o_d_s:

     This function is a *generic*, which means that packages can
     provide implementations (methods) for other classes. See the
     documentation of individual methods for extra arguments and
     differences in behaviour.

     The following methods are currently available in loaded packages:
     dbplyr (‘tbl_lazy’), dplyr (‘data.frame’).

_S_e_e _A_l_s_o:

     Other single table verbs: ‘filter()’, ‘mutate()’, ‘rename()’,
     ‘select()’, ‘slice()’, ‘summarise()’

_E_x_a_m_p_l_e_s:

     arrange(mtcars, cyl, disp)
     arrange(mtcars, desc(disp))
     
     # grouped arrange ignores groups
     by_cyl <- mtcars %>% group_by(cyl)
     by_cyl %>% arrange(desc(wt))
     # Unless you specifically ask:
     by_cyl %>% arrange(desc(wt), .by_group = TRUE)
     
     # use embracing when wrapping in a function;
     # see ?dplyr_data_masking for more details
     tidy_eval_arrange <- function(.data, var) {
       .data %>%
         arrange({{ var }})
     }
     tidy_eval_arrange(mtcars, mpg)
     
     # use across() access select()-style semantics
     iris %>% arrange(across(starts_with("Sepal")))
     iris %>% arrange(across(starts_with("Sepal"), desc))
     

